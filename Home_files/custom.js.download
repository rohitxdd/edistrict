var message = "Mouse Right Click is not Allowed!";

///////////////////////////////////
function clickIE4() {
    if (event.button == 2) {
        alert(message);
        return false;
    }
}

function clickNS4(e) {
    if (document.layers || document.getElementById && !document.all) {
        if (e.which == 2 || e.which == 3) {
            alert(message);
            return false;
        }
    }
}
if (document.layers) {
    document.captureEvents(Event.MOUSEDOWN);
    document.onmousedown = clickNS4;
}
else if (document.all && !document.getElementById) {
    document.onmousedown = clickIE4;
}
document.oncontextmenu = new Function("alert(message);return false")


$(document).ready(function () {
//    var stickyNavTop = $('#nav').offset().top;
//    var stickyNav = function () {
//        var scrollTop = $(window).scrollTop();
//        if (scrollTop > stickyNavTop) {
//            $('#nav').addClass('sticky');
//        } else {
//            $('#nav').removeClass('sticky');
//        }
//    };

//    stickyNav();

//    $(window).scroll(function () {
//        stickyNav();
//    });

//    // hide #back-top first
//    $(".backToTop").hide();

//    // fade in #back-top
//    $(function () {
//        $(window).scroll(function () {
//            if ($(this).scrollTop() > 200) {
//                $('.backToTop').fadeIn();
//            } else {
//                $('.backToTop').fadeOut();
//            }
//        });

//        // scroll body to 0px on click
//        $('.backToTop a').click(function () {
//            $('body,html').animate({
//                scrollTop: 0
//            }, 1000);
//            return false;
//        });
//    });

    //date picker
    $(".datefield").datepicker({
        dateFormat: 'dd/mm/yy',
        minDate: "01/01/1900",
        maxDate: new Date,
        changeMonth: true,
        changeYear: true,
        showButtonPanel: true,
        yearRange: "-125:+50"
    });
    $(".datefieldall").datepicker({
        dateFormat: 'dd/mm/yy',
        minDate: "01/01/1900",
        changeMonth: true,
        changeYear: true,
        showButtonPanel: true,
        yearRange: "-100:+50"
    });
    $('.datefieldfuture').each(function () {
        $(this).datepicker({
            dateFormat: 'dd/mm/yy',
            minDate: '+' + $(this).data('days') + 'D',
            changeMonth: true,
            changeYear: true,
            showButtonPanel: true,
            yearRange: "-100:+50"
        });
    })
    $('.datefieldfutureonly').each(function () {
        $(this).datepicker({
            dateFormat: 'dd/mm/yy',
            minDate: 0,
            changeMonth: true,
            changeYear: true,
            showButtonPanel: true,
            yearRange: "-100:+50"
        });
    })

    $('.datefieldfuture10yr').each(function () {
        $(this).datepicker({
            dateFormat: 'dd/mm/yy',
            minDate: '+' + $(this).data('days') + 'D',
            changeMonth: true,
            changeYear: true,
            showButtonPanel: true,
            yearRange: "-100:+10"
        });
    })

    $(".datefiel61Yr").datepicker({
        dateFormat: 'dd/mm/yy',
        minDate: "01/01/1900",
        changeMonth: true,
        changeYear: true,
        showButtonPanel: true,
        yearRange: "-80:-61"
    });

    $(".datefiel22Yr").datepicker({
        dateFormat: 'dd/mm/yy',
        minDate: "01/01/1900",
        changeMonth: true,
        changeYear: true,
        showButtonPanel: true,
        yearRange: "-60:-22"
    });
    $('.datefieldfuture30days').each(function () {
        $(this).datepicker({
            dateFormat: 'dd/mm/yy',
            minDate: "01/01/1900",
            maxDate: "+1m",
            changeMonth: true,
            changeYear: true,
            showButtonPanel: true,
            yearRange: "-50:+50"
        });
    });


$.ajaxSetup({ cache: false });
    $(document).ready(function () {
        $(".openDialog").on("click", function (e) {
            if ($(this).attr("data-dialog-refresh") == 1) {
                e.preventDefault();
                $("<div style='overflow:auto;'></div>")

                .addClass("dialog")
                .attr("id", $(this)
                .attr("data-dialog-id"))
                .appendTo("body")
                .dialog({
                    title: $(this).attr("data-dialog-title"),
                    close: function () { $(this).remove(); },
                    modal: true,
                    height: $(this).attr("data-dialog-height"),
                    width: $(this).attr("data-dialog-width"),
                    left: 0,
                    close: function (event, ui) {
                        location.reload();
                    }
                })

                .load(this.href);
            }
            else {
                e.preventDefault();
                $("<div style='overflow:auto;'></div>")

                .addClass("dialog")
                .attr("id", $(this)
                .attr("data-dialog-id"))
                .appendTo("body")
                .dialog({
                    title: $(this).attr("data-dialog-title"),
                    close: function () { $(this).remove(); },
                    modal: true,
                    height: $(this).attr("data-dialog-height"),
                    width: $(this).attr("data-dialog-width"),
                    left: 0
                })

                .load(this.href);
            }
        });

        $(".close").on("click", function (e) {
            e.preventDefault();
            $(this).closest(".dialog").dialog("close");
        });
        $(".ui-dialog-titlebar").css({ "background": "#3b5998", "border": "none", "color": "#FFF" });
        $(".ui-widget-header").css({ "background": "#3b5998", "border": "none", "color": "#FFF" }); 
    });
});


function ConvertTOMMDDYYYY(date) {
    var DateVariable = date.split('/');
    var FormatedDate = DateVariable[1] + "/" + DateVariable[0] + "/" + DateVariable[2];
    return new Date(FormatedDate);
}

function ChangeCase(elem) {
    elem.value = elem.value.toUpperCase();
}

function ChangeToUpperCaseWithoutSkipping(elem) {
    //boileruat13022020
    var ss = elem.target.selectionStart;
    var se = elem.target.selectionEnd;
    elem.target.value = elem.target.value.toUpperCase();
    elem.target.selectionStart = ss;
    elem.target.selectionEnd = se;
}

function burstCache() {
    if (!navigator.onLine) {
        document.body.innerHTML = "Loading...";
    }
}

function preventBack() {
    window.history.forward()
}

function goBack() {
    window.history.back()
}

function ValidateDocumentNo(DocumentNo, DocumentId, DepartmentId, ControlId) {
    var response = null;
    //Aadhaar Card-UID
    if (DocumentId == 1 && DepartmentId == 6) { var valid = /^([0-9]{12,12})$/.test(DocumentNo); if (valid == false) { response = "Aadhaar No. should be of 12-digit and can contain 0-9 only."; } check(DocumentNo, ControlId); }
    //Birth Certificate-MCD
    if (DocumentId == 4 && DepartmentId == 7) { var valid = /^([0-9]{6,7})$/.test(DocumentNo); if (valid == false) { response = "Certificate No. should be of 6 -7 digit and can contain 0-9 only."; } }
    //Death Certificate-MCD
    if (DocumentId == 11 && DepartmentId == 7) { var valid = /^([0-9]{6,7})$/.test(DocumentNo); if (valid == false) { response = "Certificate No. should be of 6 -7 digit and can contain 0-9 only."; } }
    //Driving License-Transport Department
    if (DocumentId == 13 && DepartmentId == 8) { var valid = /^([A-Za-z0-9\-]{15,16})$/.test(DocumentNo); if (valid == false) { response = "Driving License No. should be of 16-digit and can contain A-Z,0-9 and '-' only."; } }
    //Voter ID Card-Election Commision of India
    if (DocumentId == 36 && DepartmentId == 9) { var valid = /^([A-Za-z0-9\/]{10,17})$/.test(DocumentNo); if (valid == false) { response = "Voter Id No. should be of 10 - 17 digit and can contain A-Z,0-9 and '/' only."; } }
    //PAN Card-Income Tax
    if (DocumentId == 27 && DepartmentId == 10) { var valid = /^([A-Za-z0-9]{10,10})$/.test(DocumentNo); if (valid == false) { response = "PAN Card No. should be of 10-digit and can contain A-Z,0-9 only."; } }
    //Electricity Bill-BSES
    if (DocumentId == 14 && DepartmentId == 11) { var valid = /^([0-9]{9,9})$/.test(DocumentNo); if (valid == false) { response = "Bill No. should be of 9-digit and can 0-9 only."; } }
    //Water Bill-Delhi Jal Board
    if (DocumentId == 37 && DepartmentId == 16) { var valid = /^([0-9]{12,12})$/.test(DocumentNo); if (valid == false) { response = "Bill No. should be of 12-digit and can 0-9 only."; } }
    //Ration Card-Food and Suppy Department
    if (DocumentId == 30 && DepartmentId == 17) { var valid = /^([0-9]{12,12})$/.test(DocumentNo); if (valid == false) { response = "Card No. should be of 12-digit and can 0-9 only."; } }
    //Birth Certificate-NDMC
    if (DocumentId == 4 && DepartmentId == 3) { var valid = /^([A-Za-z0-9\/]{15,15})$/.test(DocumentNo); if (valid == false) { response = "Certificate No. should be of 15-digit and can contain A-Z,0-9 and '/' only."; } }
    //Death Certificate-NDMC
    if (DocumentId == 11 && DepartmentId == 3) { var valid = /^([A-Za-z0-9\/]{15,15})$/.test(DocumentNo); if (valid == false) { response = "Certificate No. should be of 15-digit and can contain A-Z,0-9 and '/' only."; } }
    //Electricity Bill-NDPL
    if (DocumentId == 14 && DepartmentId == 12) { var valid = /^([0-9]{11,11})$/.test(DocumentNo); if (valid == false) { response = "Bill No. should be of 11-digit and can 0-9 only."; } }
    //BPL Ration Card-Food and Suppy Department
    if (DocumentId == 44 && DepartmentId == 17) { var valid = /^([0-9]{12,12})$/.test(DocumentNo); if (valid == false) { response = "Card No. should be of 12-digit and can 0-9 only."; } }
    //Water Bill-NDMC
    if (DocumentId == 37 && DepartmentId == 3) { var valid = /^([0-9]{10,})$/.test(DocumentNo); if (valid == false) { response = "Bill No. should be atleast of 10-digit and can 0-9 only."; } }
    //Electricity Bill-NDMC
    if (DocumentId == 14 && DepartmentId == 3) { var valid = /^([0-9]{10,})$/.test(DocumentNo); if (valid == false) { response = "Bill No. should be atleast of 10-digit and can 0-9 only."; } }
    //Birth Certificate-Edistrict - Haryana
    if (DocumentId == 4 && DepartmentId == 28) { var valid = /^([0-9]{15,15})$/.test(DocumentNo); if (valid == false) { response = "Certificate No. should be of 15-digit and can contain 0-9 only."; } }
    //Death Certificate-Edistrict - Haryana
    if (DocumentId == 11 && DepartmentId == 28) { var valid = /^([0-9]{15,15})$/.test(DocumentNo); if (valid == false) { response = "Certificate No. should be of 15-digit and can contain 0-9 only."; } }
    //Caste Certificate from Parental Side-Edistrict - UP
    if (DocumentId == 43 && DepartmentId == 29) { var valid = /^([0-9]{12,12})$/.test(DocumentNo); if (valid == false) { response = "Certificate No. should be of 12-digit and can contain 0-9 only."; } }

    return response;
}

function ValidateDocumentNoEntry(DocumentNo, DocumentId, ControlId) {
    var response = null;
    //Aadhaar Card-UID
    if (DocumentId == 1) { var valid = /^([0-9]{12,12})$/.test(DocumentNo); if (valid == false) { response = "Aadhaar No. should be of 12-digit and can contain 0-9 only."; } check(DocumentNo, ControlId); }
    //Driving License
    if (DocumentId == 13) { var valid = /^([A-Za-z0-9\-]{15,16})$/.test(DocumentNo); if (valid == false) { response = "Driving License No. should be of 16-digit and can contain A-Z,0-9 and '-' only."; } }
    //Voter ID Card
    if (DocumentId == 36) { var valid = /^([A-Za-z0-9\/]{10,17})$/.test(DocumentNo); if (valid == false) { response = "Voter Id No. should be of 10 - 17 digit and can contain A-Z,0-9 and '/' only."; } }
    //PAN Card
    if (DocumentId == 27) { var valid = /^([A-Z]{5})+([0-9]{4})+([A-Z]{1})$/.test(DocumentNo); if (valid == false) { response = "PAN Card No. should be of 10-digit and can contain A-Z,0-9 only."; } }
    //Passport
    if (DocumentId == 28) { var valid = /^([A-za-z]{1})+([0-9A-Za-z]{6})+([1-9]{1})$/.test(DocumentNo); if (valid == false) { response = "Passport No. should be of 8-digit and can contain A-Z,0-9 only."; } }
    //Ration Card
    if (DocumentId == 30) { var valid = /^([0-9]{12,12})$/.test(DocumentNo); if (valid == false) { response = "Card No. should be of 12-digit and can 0-9 only."; } }
    return response;
}

function getTimezoneName() {
    tmSummer = new Date(Date.UTC(2005, 6, 30, 0, 0, 0, 0));
    so = -1 * tmSummer.getTimezoneOffset();
    tmWinter = new Date(Date.UTC(2005, 12, 30, 0, 0, 0, 0));
    wo = -1 * tmWinter.getTimezoneOffset();

    if (-660 == so && -660 == wo) return 'Pacific/Midway';
    if (-600 == so && -600 == wo) return 'Pacific/Tahiti';
    if (-570 == so && -570 == wo) return 'Pacific/Marquesas';
    if (-540 == so && -600 == wo) return 'America/Adak';
    if (-540 == so && -540 == wo) return 'Pacific/Gambier';
    if (-480 == so && -540 == wo) return 'US/Alaska';
    if (-480 == so && -480 == wo) return 'Pacific/Pitcairn';
    if (-420 == so && -480 == wo) return 'US/Pacific';
    if (-420 == so && -420 == wo) return 'US/Arizona';
    if (-360 == so && -420 == wo) return 'US/Mountain';
    if (-360 == so && -360 == wo) return 'America/Guatemala';
    if (-360 == so && -300 == wo) return 'Pacific/Easter';
    if (-300 == so && -360 == wo) return 'US/Central';
    if (-300 == so && -300 == wo) return 'America/Bogota';
    if (-240 == so && -300 == wo) return 'US/Eastern';
    if (-240 == so && -240 == wo) return 'America/Caracas';
    if (-240 == so && -180 == wo) return 'America/Santiago';
    if (-180 == so && -240 == wo) return 'Canada/Atlantic';
    if (-180 == so && -180 == wo) return 'America/Montevideo';
    if (-180 == so && -120 == wo) return 'America/Sao_Paulo';
    if (-150 == so && -210 == wo) return 'America/St_Johns';
    if (-120 == so && -180 == wo) return 'America/Godthab';
    if (-120 == so && -120 == wo) return 'America/Noronha';
    if (-60 == so && -60 == wo) return 'Atlantic/Cape_Verde';
    if (0 == so && -60 == wo) return 'Atlantic/Azores';
    if (0 == so && 0 == wo) return 'Africa/Casablanca';
    if (60 == so && 0 == wo) return 'Europe/London';
    if (60 == so && 60 == wo) return 'Africa/Algiers';
    if (60 == so && 120 == wo) return 'Africa/Windhoek';
    if (120 == so && 60 == wo) return 'Europe/Amsterdam';
    if (120 == so && 120 == wo) return 'Africa/Harare';
    if (180 == so && 120 == wo) return 'Europe/Athens';
    if (180 == so && 180 == wo) return 'Africa/Nairobi';
    if (240 == so && 180 == wo) return 'Europe/Moscow';
    if (240 == so && 240 == wo) return 'Asia/Dubai';
    if (270 == so && 210 == wo) return 'Asia/Tehran';
    if (270 == so && 270 == wo) return 'Asia/Kabul';
    if (300 == so && 240 == wo) return 'Asia/Baku';
    if (300 == so && 300 == wo) return 'Asia/Karachi';
    if (330 == so && 330 == wo) return 'Asia/Calcutta';
    if (345 == so && 345 == wo) return 'Asia/Katmandu';
    if (360 == so && 300 == wo) return 'Asia/Yekaterinburg';
    if (360 == so && 360 == wo) return 'Asia/Colombo';
    if (390 == so && 390 == wo) return 'Asia/Rangoon';
    if (420 == so && 360 == wo) return 'Asia/Almaty';
    if (420 == so && 420 == wo) return 'Asia/Bangkok';
    if (480 == so && 420 == wo) return 'Asia/Krasnoyarsk';
    if (480 == so && 480 == wo) return 'Australia/Perth';
    if (540 == so && 480 == wo) return 'Asia/Irkutsk';
    if (540 == so && 540 == wo) return 'Asia/Tokyo';
    if (570 == so && 570 == wo) return 'Australia/Darwin';
    if (570 == so && 630 == wo) return 'Australia/Adelaide';
    if (600 == so && 540 == wo) return 'Asia/Yakutsk';
    if (600 == so && 600 == wo) return 'Australia/Brisbane';
    if (600 == so && 660 == wo) return 'Australia/Sydney';
    if (630 == so && 660 == wo) return 'Australia/Lord_Howe';
    if (660 == so && 600 == wo) return 'Asia/Vladivostok';
    if (660 == so && 660 == wo) return 'Pacific/Guadalcanal';
    if (690 == so && 690 == wo) return 'Pacific/Norfolk';
    if (720 == so && 660 == wo) return 'Asia/Magadan';
    if (720 == so && 720 == wo) return 'Pacific/Fiji';
    if (720 == so && 780 == wo) return 'Pacific/Auckland';
    if (765 == so && 825 == wo) return 'Pacific/Chatham';
    if (780 == so && 780 == wo) return 'Pacific/Enderbury'
    if (840 == so && 840 == wo) return 'Pacific/Kiritimati';
    return 'US/Pacific';
}



function EncryptAES(msg, pass) {
    var getKeyAndIV = function (password) {
        var keyBitLength = 256;
        var ivBitLength = 128;
        var iterations = 100;
        var bytesInSalt = 128 / 8;
        var salt = CryptoJS.lib.WordArray.random(bytesInSalt);
        var iv128Bits = CryptoJS.PBKDF2(password, salt, { keySize: 128 / 32, iterations: iterations });
        var key256Bits = CryptoJS.PBKDF2(password, salt, { keySize: 256 / 32, iterations: iterations });
        return {
            iv: iv128Bits,
            key: key256Bits
        };
    };
    var skey = getKeyAndIV(pass);
    var data = CryptoJS.AES.encrypt(msg, skey.key, { iv: skey.iv }); // , format: JsonFormatter
    var output_text = data.ciphertext.toString(CryptoJS.enc.Base64);
    var output_key = data.key.toString(CryptoJS.enc.Base64);
    var output_iv = data.iv.toString(CryptoJS.enc.Base64);
    var transitmessage = output_key.toString() + output_iv.toString() + output_text.toString();
    return transitmessage;
}

function DecryptAES(transitmessage, pass) {
    var keySize = 256;
    var iterations = 100;
    var salt = CryptoJS.enc.Hex.parse(transitmessage.substr(0, 32));
    var iv = CryptoJS.enc.Hex.parse(transitmessage.substr(32, 32))
    var encrypted = transitmessage.substring(64);
    var key = CryptoJS.PBKDF2(pass, salt, {
        keySize: keySize / 32,
        iterations: iterations
    });
    var decrypted = CryptoJS.AES.decrypt(encrypted, key, {
        iv: iv,
        padding: CryptoJS.pad.Pkcs7,
        mode: CryptoJS.mode.CBC
    })
    return decrypted;
}

